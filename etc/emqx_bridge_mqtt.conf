##====================================================================
## Configuration for EMQ X MQTT Broker Bridge
##====================================================================

##--------------------------------------------------------------------
## Bridges to aws
##--------------------------------------------------------------------

## Bridge address: node name for local bridge, host:port for remote.
##
## Value: String
## Example: emqx@127.0.0.1,  127.0.0.1:1883
bridge.mqtt.zxb.address = 192.168.199.152:1883

## Protocol version of the bridge.
##
## Value: Enum
## - mqttv5
## - mqttv4
## - mqttv3
bridge.mqtt.zxb.proto_ver = mqttv4

## Start type of the bridge.
##
## Value: enum
## manual
## auto
bridge.mqtt.zxb.start_type = manual

## Whether to enable bridge mode for mqtt bridge
##
## This option is prepared for the mqtt broker which does not
## support bridge_mode such as the mqtt-plugin of the rabbitmq
##
## Value: boolean
bridge.mqtt.zxb.bridge_mode = true

## The ClientId of a remote bridge.
##
## Value: String
bridge.mqtt.zxb.clientid = bridge_zxb

## The Clean start flag of a remote bridge.
##
## Value: boolean
## Default: true
##
## NOTE: Some IoT platforms require clean_start
##       must be set to 'true'
bridge.mqtt.zxb.clean_start = true

## The username for a remote bridge.
##
## Value: String
bridge.mqtt.zxb.username = emqx

## The password for a remote bridge.
##
## Value: String
bridge.mqtt.zxb.password = public

## Topics that need to be forward to Zxb IoTHUB
##
## Value: String
## Example: topic1/#,topic2/#
bridge.mqtt.zxb.forwards = sensor1/#,sensor1/#

## Forward messages to the mountpoint of an Zxb IoTHUB
##
## Value: String
bridge.mqtt.zxb.forward_mountpoint = bridge/zxb/${node}/

## Need to subscribe to AWS topics
##
## Value: String
bridge.mqtt.zxb.subscription.1.topic = cmd/topic1

## Need to subscribe to AWS topics QoS.
##
## Value: Number
bridge.mqtt.zxb.subscription.1.qos = 1

## A mountpoint that receives messages from AWS IoTHUB
##
## Value: String
bridge.mqtt.zxb.receive_mountpoint = receive/zxb/


## Bribge to remote server via SSL.
##
## Value: on | off
bridge.mqtt.zxb.ssl = off

## PEM-encoded CA certificates of the bridge.
##
## Value: File
bridge.mqtt.zxb.cacertfile = etc/certs/cacert.pem

## Client SSL Certfile of the bridge.
##
## Value: File
bridge.mqtt.zxb.certfile = etc/certs/client-cert.pem

## Client SSL Keyfile of the bridge.
##
## Value: File
bridge.mqtt.zxb.keyfile = etc/certs/client-key.pem

## SSL Ciphers used by the bridge.
##
## Value: String
bridge.mqtt.zxb.ciphers = ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384

## Ciphers for TLS PSK.
## Note that 'bridge.${BridgeName}.ciphers' and 'bridge.${BridgeName}.psk_ciphers' cannot
## be configured at the same time.
## See 'https://tools.ietf.org/html/rfc4279#section-2'.
bridge.mqtt.zxb.psk_ciphers = PSK-AES128-CBC-SHA,PSK-AES256-CBC-SHA,PSK-3DES-EDE-CBC-SHA,PSK-RC4-SHA

## Ping interval of a down bridge.
##
## Value: Duration
## Default: 10 seconds
bridge.mqtt.zxb.keepalive = 60s

## TLS versions used by the bridge.
##
## Value: String
bridge.mqtt.zxb.tls_versions = tlsv1.2,tlsv1.1,tlsv1

## Bridge reconnect time.
##
## Value: Duration
## Default: 30 seconds
bridge.mqtt.zxb.reconnect_interval = 30s

## Retry interval for bridge QoS1 message delivering.
##
## Value: Duration
bridge.mqtt.zxb.retry_interval = 20s

## Publish messages in batches, only RPC Bridge supports
##
## Value: Integer
## default: 32
bridge.mqtt.zxb.batch_size = 32

## Inflight size.
##
## Value: Integer
bridge.mqtt.zxb.max_inflight_size = 32

## Base directory for replayq to store messages on disk
## If this config entry is missing or set to undefined,
## replayq works in a mem-only manner.
##
## Value: String
bridge.mqtt.zxb.queue.replayq_dir = data/emqx_zxb_bridge/

## Replayq segment size
##
## Value: Bytesize
bridge.mqtt.zxb.queue.replayq_seg_bytes = 10MB

## Replayq max total size
##
## Value: Bytesize
bridge.mqtt.zxb.queue.max_total_size = 5GB

